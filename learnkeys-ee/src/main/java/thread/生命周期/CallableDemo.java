package thread.生命周期;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;/** * @author zhouT * @date 2018/12/28 14:45 */class CallableDemo {  public static void main(String[] args) {    ThreadDemo td = new ThreadDemo();    // 构建器.执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。    FutureTask<Integer> result = new FutureTask<>(td);    new Thread(result).start();    // 2.接收线程运算后的结果    try {      Integer sum = result.get(); // FutureTask 可用于 闭锁 类似于CountDownLatch的作用，在所有的线程没有执行完成之后这里是不会执行的      System.out.println(sum);      System.out.println("------------------------------------");    } catch (InterruptedException | ExecutionException e) {      e.printStackTrace();    }  }}class ThreadDemo implements Callable<Integer> {  @Override  public Integer call() throws Exception {    int sum = 0;    for (int i = 0; i <= 100; i++) {      sum += i;    }    return sum;  }}